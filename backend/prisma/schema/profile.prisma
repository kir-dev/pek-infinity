/// * A `SvieCard` modell a SVIE (Sch√∂nherzes Villamosm√©rn√∂k√∂k √©s Informatikusok Egyes√ºlete) tagjainak √©rz√©keny adatait t√°rolja.
/// * Ez a modell elengedhetetlen a SVIE tags√°gi szab√°lyzat√°nak betart√°s√°hoz, ahogyan azt az Alapszab√°ly 3. szekci√≥ja meghat√°rozza.
/// * Kiz√°r√≥lag a SVIE vezet≈ës√©ge m√≥dos√≠thatja, √©s az adatokhoz csak a felhaszn√°l√≥ √©s a SVIE vezet≈ës√©ge f√©rhet hozz√° a mag√°nszf√©ra √©s az adatok integrit√°s√°nak biztos√≠t√°sa √©rdek√©ben.

model SvieCard {
  userId      String              @id @unique
  user        User                @relation(fields: [userId], references: [id])
  homeAddress String
  birthPlace  String
  birthDate   DateTime            @db.Date()
  birthName   String
  mothersName String
  fullName    String
  email       String
  statuses    SvieStatusHistory[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model SvieStatusHistory {
  id        String     @id @default(cuid())
  card      SvieCard   @relation(fields: [cardId], references: [userId])
  cardId    String
  status    SvieStatus
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum SvieStatus {
  // * K√ºls≈ë tag:
  // Bet√∂lt√∂tte a 18. √©let√©v√©t, √©s egy K√∂r tagja.
  FOREIGN
  // * Rendes tag:
  // A k√ºls≈ë tags√°g felt√©teleinek megfelel √©s a BME VIK nappali tagozatos hallgat√≥ja.
  ACTIVE
  // * √ñreg tag:
  // Kor√°bban k√ºls≈ë vagy rendes tag volt, vagy a BME VIK-en hallgat√≥i jogviszonnyal rendelkezett.
  FORMAL
}

model Profile {
  userId           String                @id @unique
  user             User                  @relation(fields: [userId], references: [id])
  firstName        String?
  lastName         String?
  nickname         String?
  cellPhone        String?
  room             String?
  dormitory        Dormitory?            @default(UNKNOWN)
  gender           Gender?               @default(UNKNOWN)
  studentStatus    StudentStatus?        @default(UNKNOWN)
  externalAccounts ExternalAccountLink[]
}

enum Dormitory {
  KARMAN
  TETENY
  SCH
  BAROSS
  BERCSENYI
  VASARHELYI
  EXTERNAL
  UNKNOWN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  UNKNOWN
}

enum StudentStatus {
  ACTIVE
  GRADUATED
  OTHER
  UNKNOWN
}

model ExternalAccountLink {
  id          String                  @id @default(cuid())
  protocol    ExternalAccountProtocol
  accountName String
  ownerId     String
  owner       Profile                 @relation(fields: [ownerId], references: [userId])
}

enum ExternalAccountProtocol {
  X_FORMERLY_TWITTER     @map("twitter")
  SKYPE                  @map("skype")
  CALL_SIGN              @map("call_sign")
  IRC                    @map("irc")
  GTALK                  @map("gtalk")
  JABBER                 @map("jabber")
  META_FORMERLY_FACEBOOK @map("facebook")
  TELEGRAM               @map("Telegram")
  SCH_MAIL               @map("sch_mail")
  HIMZO                  @map("H√≠mzek")
  GMAIL                  @map("gmail")
  EASTER_EGG             @map("üçÜ")
}
