datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}


enum RoleCategory {
  // a public/baseline access level
  // ideally there should be only one role with this category, assigned to everyone
  GLOBAL

  // managing an individual user's profile
  // typically assigned to the user themselves
  PROFILE

  // Permissions automatically assigned by the system based on special factors
  // e.g. derived from student status
  SYSTEM_DERIVED

  // assigned based on group memberships
  // e.g. kir-dev active member, kir-dev old member, kir-dev newbie
  GROUP_DERIVED

  // manually assigned by the admin or a statement
  STATEMENT_AUTHORIZED

  // generated by some user interactions, eg.: sharing a document
  USER_GENERATED

  // a catch-all for everything else such as experimental features
  OTHER
}

model Role {
  id          String       @id @default(cuid())
  name        String
  category    RoleCategory
  permissions Json[] // {resource: string, create: b}
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  expiration  DateTime?
  users       User[]
}

model Semester {
  name               String                @id
  guidelines         GuidelineCollection[]
  scoreboards        Scoreboard[]
  entryAwardRequests EntryAwardRequest[]
  pointHistories     PointHistory[]
}

model SystemAttributes {
  name  SystemAttributeKey @id
  value String             @db.VarChar(255)
}

enum SystemAttributeKey {
  SEMESTER
  NEWBIE_PERIOD
  LAST_LOG_SENT
  MAX_POINT_FOR_SEMESTER
  EVALUATION_PERIOD
}

model Notification {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  message     String
  seen        Boolean  @default(false)
  link        String
  recipientId String
  recipient   User     @relation("recipient", fields: [recipientId], references: [id])
  senderId    String?
  sender      User?    @relation("sender", fields: [senderId], references: [id])
}
