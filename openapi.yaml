openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppHome
      parameters: []
      responses:
        "200":
          description: ""
        "302":
          description: Redirects to the API documentation.
      tags: &a1
        - default
  /ping:
    get:
      operationId: AppPing
      summary: ""
      description: >-
        # Health check endpoint<br>


        This endpoint is a simple health check API designed to confirm that the
        server is operational.


        When accessed, it returns a straightforward response indicating that the
        service is up and running.
      parameters: []
      responses:
        "200":
          description: Pong
          example: pong
          content:
            application/json:
              schema:
                type: string
      tags: *a1
  /api/v4/auth/login:
    get:
      operationId: AuthLogin
      parameters: []
      responses:
        "200":
          description: ""
        "302":
          description: Redirects to the AuthSch login page.
        "401": &a5
          description: Unauthorized
          example: &a2
            response:
              data:
                statusCode: 401
                error: Unauthorized
                message: Human readable error
            status: 401
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AxiosErrorDto"
              example: *a2
        "403": &a6
          description: Forbidden
          example: &a3
            response:
              data:
                statusCode: 403
                error: Forbidden
                message: Human readable error
            status: 403
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AxiosErrorDto"
              example: *a3
        "500": &a7
          description: Internal Server Error
          example: &a4
            response:
              data:
                statusCode: 500
                error: Internal Server Error
                message: Human readable error
            status: 500
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AxiosErrorDto"
              example: *a4
      tags: &a8
        - auth
      security: &a9
        - bearer: []
        - jwt: []
  /api/v4/auth/callback:
    get:
      operationId: AuthOauthRedirect
      parameters:
        - name: code
          required: true
          in: query
          schema: {}
      responses:
        "200":
          description: ""
        "302":
          description: Redirects to the frontend and sets cookie with JWT.
        "401": *a5
        "403": *a6
        "500": *a7
      tags: *a8
      security: *a9
  /api/v4/auth/logout:
    get:
      operationId: AuthLogout
      parameters: []
      responses:
        "200":
          description: ""
        "302":
          description: Redirects to the frontend and clears the JWT cookie.
        "401": *a5
        "403": *a6
        "500": *a7
      tags: *a8
      security: *a9
  /api/v4/auth/me:
    get:
      operationId: AuthMe
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "401": *a5
        "403": *a6
        "500": *a7
      tags: *a8
      security: *a9
  /api/v4/group:
    post:
      operationId: GroupCreate
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGroupDto"
      responses:
        "201":
          description: Create group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDto"
        "401": &a13
          description: Unauthorized
          example: &a10
            response:
              data:
                statusCode: 401
                error: Unauthorized
                message: Human readable error
            status: 401
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AxiosErrorDto"
              example: *a10
        "403": &a14
          description: Forbidden
          example: &a11
            response:
              data:
                statusCode: 403
                error: Forbidden
                message: Human readable error
            status: 403
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AxiosErrorDto"
              example: *a11
        "500": &a15
          description: Internal Server Error
          example: &a12
            response:
              data:
                statusCode: 500
                error: Internal Server Error
                message: Human readable error
            status: 500
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AxiosErrorDto"
              example: *a12
      tags: &a16
        - group
      security: &a17
        - bearer: []
        - jwt: []
    get:
      operationId: GroupFindAll
      parameters:
        - name: page
          required: false
          in: query
          example: 1
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          example: 10
          schema:
            type: number
      responses:
        "200":
          description: Get all groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupListItemDto"
        "401": *a13
        "403": *a14
        "500": *a15
      tags: *a16
      security: *a17
  /api/v4/group/{id}:
    get:
      operationId: GroupFindOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: Get one group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDto"
        "401": *a13
        "403": *a14
        "500": *a15
      tags: *a16
      security: *a17
    put:
      operationId: GroupUpdate
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupDto"
      responses:
        "200":
          description: Update group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupDto"
        "401": *a13
        "403": *a14
        "500": *a15
      tags: *a16
      security: *a17
    delete:
      operationId: GroupRemove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
        "204":
          description: Delete group
        "401": *a13
        "403": *a14
        "500": *a15
      tags: *a16
      security: *a17
info:
  title: PÃ‰K API
  description: Profiles and Groups
  version: v4
  contact:
    name: kir-dev
    url: https://kir-dev.hu
    email: hello@kir-dev.hu
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
    cookie:
      type: apiKey
      in: cookie
      name: jwt
  schemas:
    UnauthorizedErrorDto:
      type: object
      properties:
        message:
          type: string
          default: JWT cookie or Bearer token not found
          enum:
            - Authorization token not found
        statusCode:
          type: number
          default: 401
          enum:
            - 401
        error:
          type: string
          default: Unauthorized
          enum:
            - Unauthorized
          nullable: true
      required:
        - message
        - statusCode
    InternalServerErrorDto:
      type: object
      properties:
        statusCode:
          type: number
          default: 500
          enum:
            - 500
        message:
          type: string
          default: Internal Server Error
          enum:
            - Internal Server Error
      required:
        - statusCode
        - message
    ForbiddenErrorDto:
      type: object
      properties:
        statusCode:
          type: number
          default: 403
          enum:
            - 403
        message:
          type: string
        resourceId:
          type: string
          example: pek:group:123:profile
          nullable: true
        resourceOp:
          type: string
          enum:
            - CREATE
            - READ
            - UPDATE
            - DELETE
          nullable: true
        error:
          type: string
          enum:
            - Forbidden
          nullable: true
      required:
        - statusCode
        - message
    AxiosErrorResponseDto:
      type: object
      properties:
        data:
          description: Data of type T
          oneOf:
            - $ref: "#/components/schemas/InternalServerErrorDto"
            - $ref: "#/components/schemas/UnauthorizedErrorDto"
            - $ref: "#/components/schemas/ForbiddenErrorDto"
      required:
        - data
    AxiosErrorDto:
      type: object
      properties:
        response:
          $ref: "#/components/schemas/AxiosErrorResponseDto"
        status:
          type: number
      required:
        - response
        - status
    UserDto:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
      required:
        - name
        - id
    CreateGroupDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
        purpose:
          type: object
        isCommunity:
          type: boolean
        isResort:
          type: boolean
        isTaskForce:
          type: boolean
        hasTransitiveMembership:
          type: boolean
        isArchived:
          type: boolean
      required:
        - name
        - description
        - purpose
        - isCommunity
        - isResort
        - isTaskForce
        - hasTransitiveMembership
        - isArchived
    GroupListItemDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the group
          example: cjld2cjxh0000qzrmn831i7rn
        name:
          type: string
          description: Unique name of the group
          example: Developers
      required:
        - id
        - name
    MemberUserDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the user
          example: cjld2cjxh0000qzrmn831i7rn
        firstName:
          type: string
          description: First name of the member
          example: John
        lastName:
          type: string
          description: Last name of the member
          example: Doe
        nickname:
          type: string
          description: Nickname of the member
          example: Johnny
      required:
        - id
        - firstName
        - lastName
        - nickname
    MemberListItemDto:
      type: object
      properties:
        user:
          description: User profile of the member
          allOf:
            - $ref: "#/components/schemas/MemberUserDto"
      required:
        - user
    GroupDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the group
          example: cjld2cjxh0000qzrmn831i7rn
        name:
          type: string
          description: Unique name of the group
          example: Developers
        description:
          type: string
          description: Description of the group purpose and activities
          example: Group for software developers
        purpose:
          type: string
          description: The primary purpose/type of the group
          enum:
            - UNKNOWN
            - OLD
            - COMMITTEE
            - PARTY
            - CIRCLE
            - D
            - ELLIPSE
            - YEAR_CLASS
            - GROUP
            - CULTURE
            - PROJECT
            - EVENT
            - RESORT
            - SPORT
            - PROFESSIONAL
            - FLOOR
            - SERVICE
          example: GROUP
        isCommunity:
          type: boolean
          description: Whether this group is a community
          example: true
        isResort:
          type: boolean
          description: Whether this group is a resort
          example: false
        isTaskForce:
          type: boolean
          description: Whether this group is a task force
          example: false
        hasTransitiveMembership:
          type: boolean
          description: Whether this group inherits members from child groups
          example: true
        children:
          description: Children groups of this group
          type: array
          items:
            $ref: "#/components/schemas/GroupListItemDto"
        parent:
          nullable: true
          description: Parent group of this group
          allOf:
            - $ref: "#/components/schemas/GroupListItemDto"
        memberships:
          description: Members of this group
          type: array
          items:
            $ref: "#/components/schemas/MemberListItemDto"
      required:
        - id
        - name
        - description
        - purpose
        - isCommunity
        - isResort
        - isTaskForce
        - hasTransitiveMembership
        - children
        - parent
        - memberships
    UpdateGroupDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
        purpose:
          type: object
        isCommunity:
          type: boolean
        isResort:
          type: boolean
        isTaskForce:
          type: boolean
        hasTransitiveMembership:
          type: boolean
        isArchived:
          type: boolean
externalDocs:
  description: Source Code (GitHub)
  url: https://github.com/kir-dev/pek-infinity
